/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prueba;

import java.awt.Component;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
//import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Formatter;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.DefaultCellEditor;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author grana
 */
public class Cargar_Registros extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame1
     */
    //variable de tipo Connection la cual nos permitirá abrir y cerrar conexión con la BBDD
    public Connection connection;
    //variable la cual nos permitirá guardar las consultas lanzadas desde la aplicación Java hacía la BBDD
    public Statement statement;
    //variable la cual nos permitirá ejecutar las consultas almacenadas en la variable statement
    public PreparedStatement preparedStatement;

    public ResultSet rs;

    public DefaultTableModel modelo = new DefaultTableModel();

    String fichero = "";

    String fecha_inicio, fecha_fin;

    String DataInici, DataFi, Origen;
    String cantidad2 = "";

    int cantidad, Mercat, CodiMCS;

    float PDom, PMin, PMax;

    boolean isVisible;

    private final DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();

    public Cargar_Registros() {
        initComponents();
        jFormattedTextField1.setVisible(isVisible);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_guardar1 = new java.awt.Button();
        jPanel1 = new javax.swing.JPanel();
        btn_guardar = new java.awt.Button();
        btn_cargar_registros = new java.awt.Button();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();

        btn_guardar1.setActionCommand("Guardar Registros");
        btn_guardar1.setLabel("Guardar Registros");
        btn_guardar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btn_guardar.setActionCommand("Guardar Registros");
        btn_guardar.setLabel("Guardar registres");
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        btn_cargar_registros.setLabel("Carga registres");
        btn_cargar_registros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cargar_registrosActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setRowHeight(20);
        jTable1.setRowMargin(2);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jTable1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTable1InputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jFormattedTextField1.setText("jFormattedTextField1");
        jFormattedTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(202, 202, 202)
                        .addComponent(btn_cargar_registros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(btn_guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_cargar_registros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_guardar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btn_cargar_registros.getAccessibleContext().setAccessibleName("Carga registres");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        // TODO add your handling code here:
        //FileWriter flwriter = null;

        Cargar_Registros frame = new Cargar_Registros();

        int respuesta = JOptionPane.showConfirmDialog(frame, "¿ Estàs segur que vols guardar els registres introduïts ?", "D'acord", JOptionPane.YES_NO_OPTION);
        if (respuesta == 0) {
            try {
                try {
                    connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
                } catch (SQLException ex) {
                    Logger.getLogger(Cargar_Registros.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("conexion abierta" + connection);

                statement = connection.createStatement();

                //si en el mensaje indica que si, guardamos los registros a la BBDD
                //if (respuesta == 0) {
                for (int i = 0; i < jTable1.getRowCount(); i++) {

                    fecha_inicio = jTable1.getValueAt(i, 0).toString();
                    System.out.println(fecha_inicio);
                    fecha_inicio = fecha_inicio.concat(" ");
                    System.out.println(fecha_inicio);
                    fecha_inicio = fecha_inicio.replace(" ", "T00:00:00.0");
                    System.out.println(fecha_inicio);

                    fecha_fin = jTable1.getValueAt(i, 1).toString();
                    System.out.println(fecha_fin);
                    fecha_fin = fecha_fin.concat(" ");
                    System.out.println(fecha_fin);
                    fecha_fin = fecha_fin.replace(" ", "T00:00:00.0");
                    System.out.println(fecha_fin);

                    String codigo = jTable1.getValueAt(i, 2).toString();
                    codigo = codigo.replace(" ", "");
                    System.out.println(codigo);

                    //double cantidad = Double.parseDouble(jTable1.getValueAt(i, 3).toString());
                    String cantidad = jTable1.getValueAt(i, 4).toString();
                    System.out.println(cantidad);

                    cantidad = cantidad.replace(".", "");
                    String sb = "00000000";
                    if (cantidad.contentEquals(sb)) {
                        cantidad = "0";
                    } else {

                    }

                    String consulta = "INSERT INTO dbo.DatosExternos"
                            + "(DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen, Fet) "
                            + "VALUES('" + fecha_inicio + "','"
                            + fecha_fin + "','"
                            + codigo + "','"
                            + cantidad + "',"
                            + "'0','0','0','0','0','0');";

                    System.out.println(consulta);

                    //se añade la consulta a la variable, para luego poder ejecutarla
                    preparedStatement = connection.prepareStatement(consulta);
                    System.out.println(preparedStatement);

                    preparedStatement.executeUpdate();

                    preparedStatement.close();
                }

                limpiar_tabla();
                insert_00206_DatosExternos(fecha_inicio, fecha_fin); //insertamos por detras el registro del codigo 00206 en la tabla DatosExternos con las fechas de los registros introducidos por el C.Farres
                pre_cargar_datos();//hacemos un insert a DatosFinales de todos los registros de OrigenDatos y DatosExternos
                update3_pre_cargar_datos();//hacemos un update del campo fet en DatosFinales
                update206_DatosExternos();//realizamos la suma de las cantidades 00201+00202+00203 en 00206 en DatosExternos
                select_suma_codiMCS();//hacemos un select para sacar la suma total de los codigos CodiMCS, lo guardamos en variables y luego borramos de DatosFinales los registros de los codigos CodiMCS (00201 al 00299)
                insert_suma_MCS_ENVIO();
                rsToTxt();
                //obtenerMesFichero();
                actualizar_fet_final();  //metodo que actualiza el campo Fet a 1 de las tablas OrigenDatos, DatosExternos y DatosFinales

            } catch (SQLException ex) {
                Logger.getLogger(Cargar_Registros.class.getName()).log(Level.SEVERE, null, ex);
            }

            JOptionPane.showMessageDialog(frame, "Els registres introduïts s'han guardat correctament");
            try {
                mailto(fichero);

            } catch (IOException ex) {
                Logger.getLogger(Cargar_Registros.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            System.exit(0);
        } else {
        }


    }//GEN-LAST:event_btn_guardarActionPerformed

    private void btn_guardar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardar1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_guardar1ActionPerformed

    private void btn_cargar_registrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cargar_registrosActionPerformed
        update_pre_cargar_datos();
        try {

            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta_Cargar_Registros" + connection);

            statement = connection.createStatement();

            String consulta = "SELECT DISTINCT CONVERT (date, DataInici), CONVERT (date, DataFi), CodiMCS, nom, null as Quantitat, PDom, PMin, PMax, Mercat, Origen FROM OrigenDatos\n"
                    + "INNER JOIN CodisMCS \n"
                    + "ON CodisMCS.codi = OrigenDatos.CodiMCS\n"
                    + "WHERE OrigenDatos.CodiMCS IN ('00201', '00202', '00203', '00204', '00299') AND OrigenDatos.Fet = '0'";

            System.out.println(consulta);

            preparedStatement = connection.prepareStatement(consulta);

            rs = preparedStatement.executeQuery();
            //NumberFormat nf = NumberFormat.getInstance();

            modelo.setColumnIdentifiers(new Object[]{"Data inici", "Data fi", "CodiMCS", "Nom Producte", "Quantitat"});
            System.out.println(rs);

            //int registros_cantidad = 0;
            while (rs.next()) {

                Object registros[] = new Object[5];
                //Object registros2[][] = new Object[4][8];
                for (int i = 0; i < 5; i++) {

                    registros[i] = rs.getString(i + 1);

                    System.out.println(i);
                    System.out.println(registros[i]);

                }
                modelo.addRow(registros);
            }

            DefaultTableCellRenderer alinearDerecha, alinearCentro;
            alinearCentro = new DefaultTableCellRenderer();
            alinearCentro.setHorizontalAlignment(SwingConstants.CENTER);
            alinearDerecha = new DefaultTableCellRenderer();
            alinearDerecha.setHorizontalAlignment(SwingConstants.RIGHT);

            jTable1.setModel(modelo);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(0).setCellRenderer(alinearCentro);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(1).setCellRenderer(alinearCentro);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(2).setCellRenderer(alinearCentro);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(4).setCellRenderer(alinearDerecha);

        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        try {
            //cerramos la conexión
            connection.close();
            //comprobamos que se ha cerrado correctamente la conexión.
            if (connection.isClosed() == true) {
                System.out.println("Conexion cerrada" + connection);
                //si no se ha cerrado correctamente la conexión, volvemos a intentar cerrarla.
            } else {
                connection.close();
                System.out.println("Se ha cerrado la conexión" + connection);

            }
            //capturamos los posibles errores a nivel de SQL, que se puedan producir durante la ejecución
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_cargar_registrosActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed

    }//GEN-LAST:event_jTable1KeyPressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        jFormattedTextField1 = new JFormattedTextField();

        int i = jTable1.getSelectedRow();
        int j = jTable1.getSelectedColumn();

        JOptionPane.showMessageDialog(null, jFormattedTextField1, "Escriu la quantitat corresponent", 1);

        jTable1.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(jFormattedTextField1));
        DecimalFormat df = new DecimalFormat(",###");
        cantidad2 = jFormattedTextField1.getText();
        double amount = Double.parseDouble(cantidad2);
        jTable1.setValueAt(df.format(amount), i, j);


    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyTyped

    private void jTable1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTable1InputMethodTextChanged

    }//GEN-LAST:event_jTable1InputMethodTextChanged

    private void jFormattedTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField1ActionPerformed

    }//GEN-LAST:event_jFormattedTextField1ActionPerformed

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed

    }//GEN-LAST:event_jTable1MousePressed

    private void limpiar_tabla() {

        modelo = (DefaultTableModel) jTable1.getModel();
        int rowCount = modelo.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    public static void showMessageDialog(Component parentComponent,
            Object message,
            String title,
            int messageType) {
        title = "Escriu la quantitat corresponent al nom del producte";

    }

    private void pre_cargar_datos() {

        try {

            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta - pre_cargar_datos" + connection);

            statement = connection.createStatement();

            String consulta2 = "INSERT INTO DatosFinales (DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen)\n"
                    + "SELECT DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen\n"
                    + "FROM dbo.OrigenDatos WHERE Fet = '0' GROUP BY DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen\n"
                    + "UNION ALL SELECT DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen\n"
                    + "FROM dbo.DatosExternos WHERE CodiMCS IN ('00201', '00202', '00203', '00204', '00206', '00299')\n"
                    + "AND Fet = '0' GROUP BY DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen";

            System.out.println(consulta2);

            preparedStatement = connection.prepareStatement(consulta2);

            preparedStatement.executeUpdate();
            preparedStatement.close();

        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        try {
            //cerramos la conexión
            connection.close();
            //comprobamos que se ha cerrado correctamente la conexión.
            if (connection.isClosed() == true) {
                System.out.println("Conexion cerrada" + connection);
                //si no se ha cerrado correctamente la conexión, volvemos a intentar cerrarla.
            } else {
                connection.close();
                System.out.println("Se ha cerrado la conexión" + connection);

            }
            //capturamos los posibles errores a nivel de SQL, que se puedan producir durante la ejecución
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void insert_00206_DatosExternos(String fecha_inicio, String fecha_fin) {

        String codigo = "00206";
        String cantidad = "0";

        try {

            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta - insert_00206_DatosExternos" + connection);

            statement = connection.createStatement();

            String consulta2 = "INSERT INTO dbo.DatosExternos"
                    + "(DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen, Fet) "
                    + "VALUES('" + fecha_inicio + "','"
                    + fecha_fin + "','"
                    + codigo + "','"
                    + cantidad + "',"
                    + "'0','0','0','0','0','0');";

            System.out.println(consulta2);

            preparedStatement = connection.prepareStatement(consulta2);

            preparedStatement.executeUpdate();
            preparedStatement.close();

            //rs = preparedStatement.executeQuery(consulta2);
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        try {
            //cerramos la conexión
            connection.close();
            //comprobamos que se ha cerrado correctamente la conexión.
            if (connection.isClosed() == true) {
                System.out.println("Conexion cerrada" + connection);
                //si no se ha cerrado correctamente la conexión, volvemos a intentar cerrarla.
            } else {
                connection.close();
                System.out.println("Se ha cerrado la conexión" + connection);

            }
            //capturamos los posibles errores a nivel de SQL, que se puedan producir durante la ejecución
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void iniciar() {
        JOptionPane.showMessageDialog(this, "Has d'escriure les quantitats corresponents al nom de producte");
    }

    //Método para poner a 0 todos los nuevos registros que han llegado del mes de estadisticas, para poder trabajar con ellos
    private void update_pre_cargar_datos() {

        try {

            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta - update_pre_cargar_datos" + connection);

            statement = connection.createStatement();

            /*String consulta2 = "UPDATE OrigenDatos SET Fet = 0\n"
                    + "WHERE CodiMCS IN ('00201', '00202', '00203', '00204', '00206', '00299') AND Fet IS NULL;";*/
            String consulta2 = "UPDATE OrigenDatos SET FET = 0 WHERE FET IS NULL";
            System.out.println(consulta2);

            preparedStatement = connection.prepareStatement(consulta2);

            preparedStatement.executeUpdate();
            preparedStatement.close();

            //rs = preparedStatement.executeQuery(consulta2);
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        try {
            //cerramos la conexión
            connection.close();
            //comprobamos que se ha cerrado correctamente la conexión.
            if (connection.isClosed() == true) {
                System.out.println("Conexion cerrada" + connection);
                //si no se ha cerrado correctamente la conexión, volvemos a intentar cerrarla.
            } else {
                connection.close();
                System.out.println("Se ha cerrado la conexión" + connection);

            }
            //capturamos los posibles errores a nivel de SQL, que se puedan producir durante la ejecución
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void update3_pre_cargar_datos() {

        try {

            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta - update3_pre_cargar_datos" + connection);

            statement = connection.createStatement();

            String consulta2 = "UPDATE DatosFinales SET FET = 0 WHERE FET IS NULL";
            System.out.println(consulta2);

            preparedStatement = connection.prepareStatement(consulta2);

            preparedStatement.executeUpdate();
            preparedStatement.close();

        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        try {
            //cerramos la conexión
            connection.close();
            //comprobamos que se ha cerrado correctamente la conexión.
            if (connection.isClosed() == true) {
                System.out.println("Conexion cerrada" + connection);
                //si no se ha cerrado correctamente la conexión, volvemos a intentar cerrarla.
            } else {
                connection.close();
                System.out.println("Se ha cerrado la conexión" + connection);

            }
            //capturamos los posibles errores a nivel de SQL, que se puedan producir durante la ejecución
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void update206_DatosExternos() {

        try {

            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta - update206_DatosExternos" + connection);

            statement = connection.createStatement();

            String consulta2 = "Update DatosExternos\n"
                    + "set Quantitat = \n"
                    + "    (select SUM(CAST(Quantitat AS INT)) AS Quantitat from DatosExternos WHERE CodiMCS IN ('00201', '00202', '00203')\n"
                    + "AND Fet = '0')\n"
                    + "WHERE CodiMCS = '00206'";
            System.out.println(consulta2);

            preparedStatement = connection.prepareStatement(consulta2);

            preparedStatement.executeUpdate();
            preparedStatement.close();

            //rs = preparedStatement.executeQuery(consulta2);
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        try {
            //cerramos la conexión
            connection.close();
            //comprobamos que se ha cerrado correctamente la conexión.
            if (connection.isClosed() == true) {
                System.out.println("Conexion cerrada" + connection);
                //si no se ha cerrado correctamente la conexión, volvemos a intentar cerrarla.
            } else {
                connection.close();
                System.out.println("Se ha cerrado la conexión" + connection);

            }
            //capturamos los posibles errores a nivel de SQL, que se puedan producir durante la ejecución
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void setTableVisible(JTable jTable1, boolean isVisible) {
        jTable1.setVisible(isVisible);
        jTable1.getTableHeader().setVisible(isVisible);
    }

    private void select_suma_codiMCS() throws SQLException {

        try {

            setVisible(isVisible);

            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta - select_suma_codiMCS" + connection);

            statement = connection.createStatement();

            String consulta2 = "SELECT DataInici, DataFi, CodiMCS, SUM(CAST(Quantitat AS INT)) AS Quantitat, PDom, PMin, PMax, Mercat, Origen\n"
                    + "FROM\n"
                    + "(SELECT DataInici, DataFi, CodiMCS, Quantitat, ISNULL(PDom,0) AS PDom, ISNULL(PMin,0) AS Pmin, ISNULL(PMax,0) AS PMax, Mercat, ISNULL(Origen,0) AS Origen\n"
                    + "FROM OrigenDatos WHERE CodiMCS IN ('00201', '00202', '00203', '00204', '00206', '00299')\n"
                    + "AND Fet = '0'\n"
                    + "GROUP BY DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen\n"
                    + "UNION ALL\n"
                    + "SELECT DataInici, DataFi, CodiMCS,  Quantitat, ISNULL(PDom,0) AS PDom, ISNULL(PMin,0) AS Pmin, ISNULL(PMax,0) AS PMax, Mercat, ISNULL(Origen,0) AS Origen\n"
                    + "FROM DatosExternos WHERE CodiMCS IN ('00201', '00202', '00203', '00204', '00206', '00299')\n"
                    + "AND Fet = '0'\n"
                    + "GROUP BY DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen\n"
                    + ")DatosFinales\n"
                    + "GROUP BY DataInici, DataFi, CodiMCS, PDom, PMin, PMax, Mercat, Origen";
            System.out.println(consulta2);

            preparedStatement = connection.prepareStatement(consulta2);
            rs = preparedStatement.executeQuery();

            modelo.setColumnIdentifiers(new Object[]{"DataInici", "DataFi", "CodiMCS", "Quantitat", "PDom", "PMin", "PMax", "Mercat", "Origen"});
            System.out.println(rs);

            while (rs.next()) {

                Object registros[] = new Object[9];
                for (int i = 0; i < 9; i++) {

                    registros[i] = rs.getString(i + 1);

                    System.out.println(i);
                    System.out.println(registros[i]);

                }

                modelo.addRow(registros);
            }

            preparedStatement.close();

            statement = connection.createStatement();

            String consulta3 = "DELETE FROM DatosFinales WHERE CodiMCS IN ('00201', '00202', '00203', '00204', '00206', '00299')\n"
                    + "AND Fet = '0'";

            preparedStatement = connection.prepareStatement(consulta3);

            preparedStatement.executeUpdate();
            preparedStatement.close();

            try {
                //cerramos la conexión
                connection.close();
                //comprobamos que se ha cerrado correctamente la conexión.
                if (connection.isClosed() == true) {
                    System.out.println("Conexion cerrada" + connection);
                    //si no se ha cerrado correctamente la conexión, volvemos a intentar cerrarla.
                } else {
                    connection.close();
                    System.out.println("Se ha cerrado la conexión" + connection);

                }
                //capturamos los posibles errores a nivel de SQL, que se puedan producir durante la ejecución
            } catch (SQLException ex) {
                Logger.getLogger(Cargar_Registros.class
                        .getName()).log(Level.SEVERE, null, ex);

            }
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void insert_suma_MCS_ENVIO() throws SQLException {

        try {
            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta - insert_suma_MCS_ENVIO" + connection);

            statement = connection.createStatement();

            for (int i = 0; i < jTable1.getRowCount(); i++) {

                fecha_inicio = jTable1.getValueAt(i, 0).toString();
                System.out.println(fecha_inicio);
                fecha_inicio = fecha_inicio.replace(" ", "T");
                System.out.println(fecha_inicio);

                fecha_fin = jTable1.getValueAt(i, 1).toString();
                fecha_fin = fecha_fin.replace(" ", "T");
                System.out.println(fecha_fin);

                String codigo = jTable1.getValueAt(i, 2).toString();
                codigo = codigo.replace(" ", "");
                System.out.println(codigo);

                //double cantidad = Double.parseDouble(jTable1.getValueAt(i, 3).toString());
                String cantidad = jTable1.getValueAt(i, 3).toString();
                System.out.println(cantidad);

                PDom = Float.parseFloat(jTable1.getValueAt(i, 4).toString());
                System.out.println(PDom);

                PMin = Float.parseFloat(jTable1.getValueAt(i, 5).toString());
                System.out.println(PDom);

                PMax = Float.parseFloat(jTable1.getValueAt(i, 6).toString());
                System.out.println(PMax);

                String Mercat = jTable1.getValueAt(i, 7).toString();
                Mercat = Mercat.replace(" ", "");
                System.out.println(Mercat);

                Origen = jTable1.getValueAt(i, 8).toString();
                System.out.println(Origen);

                int Fet = 0;

                String consulta4 = "INSERT INTO dbo.DatosFinales"
                        + "(DataInici, DataFi, CodiMCS, Quantitat, PDom, PMin, PMax, Mercat, Origen, Fet) "
                        + "VALUES('" + fecha_inicio + "','"
                        + fecha_fin + "','"
                        + codigo + "','"
                        + cantidad + "','"
                        + PDom + "','"
                        + PMin + "','"
                        + PMax + "','"
                        + Mercat + "','"
                        + Origen + "','"
                        + Fet + "');";

                System.out.println(consulta4);

                preparedStatement = connection.prepareStatement(consulta4);

                preparedStatement.executeUpdate();
                preparedStatement.close();
            }

            try {
                //cerramos la conexión
                connection.close();
                //comprobamos que se ha cerrado correctamente la conexión.
                if (connection.isClosed() == true) {
                    System.out.println("Conexion cerrada" + connection);
                    //si no se ha cerrado correctamente la conexión, volvemos a intentar cerrarla.
                } else {
                    connection.close();
                    System.out.println("Se ha cerrado la conexión" + connection);

                }
                //capturamos los posibles errores a nivel de SQL, que se puedan producir durante la ejecución
            } catch (SQLException ex) {
                Logger.getLogger(Cargar_Registros.class
                        .getName()).log(Level.SEVERE, null, ex);

            }
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void rsToTxt() {
        StringBuffer strBuf = null;
        Formatter obj = new Formatter();
        String cantidadtotal = null;
        int Origen;
        String PDomtotal, PMintotal, PMaxtotal = "", Origen2, CodiMCS, PDomtotal2, PMintotal2, PMaxTotal2;

        try {
            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta_FicheroTXT" + connection);

            statement = connection.createStatement();

            /*String consulta = "SELECT DataInici, DataFi, CodiMCS, Origen, CAST(Quantitat AS NUMERIC) AS Quantitat, PDom, PMax, PMin\n"
                    + "FROM DatosFinales WHERE Fet = '0' ORDER BY CodiMCS";*/
            String consulta = "SELECT DataInici, DataFi, CodiMCS, Origen, CAST(Quantitat AS NUMERIC) AS Quantitat, PDom, PMax, PMin\n"
                    + "FROM DatosFinales WHERE Fet = '0' AND CodiMCS != '00206' ORDER BY \n"
                    + "CASE WHEN CodiMCS LIKE '0%' THEN 1 ELSE 0 END, CodiMCS";

            System.out.println(consulta);

            preparedStatement = connection.prepareStatement(consulta);
            rs = preparedStatement.executeQuery();
            strBuf = new StringBuffer();

            fichero = "Ruta donde se guardará el fichero" + "M08M" + obtenerMesFichero();

            BufferedWriter bfw = new BufferedWriter(new FileWriter(fichero));

            String data_row;
            while (rs.next()) {
                System.out.println("Dentro while RS");

                data_row = " ";

                data_row += "08";

                java.sql.Date date = rs.getDate("DataInici");
                DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
                String dateStr = dateFormat.format(date);
                System.out.println("DataInici" + dateStr);
                data_row += dateStr;

                date = rs.getDate("DataFi");
                dateFormat = new SimpleDateFormat("yyyyMMdd");
                String dateStr2 = dateFormat.format(date);
                System.out.println("DataFi" + dateStr2);
                data_row += dateStr2;

                CodiMCS = rs.getString("CodiMCS").trim();
                data_row += CodiMCS;
                System.out.println("CodiMCS" + CodiMCS);

                Origen = rs.getInt("Origen");
                if (Integer.toString(Origen).length() <= 3) {
                    Origen2 = String.format("%03d", Origen);
                    data_row += Origen2;
                    System.out.println("Origen" + Origen2);
                }

                cantidad = rs.getInt("Quantitat");
                if (Integer.toString(cantidad).length() <= 9) {
                    cantidadtotal = String.format("%09d", cantidad);
                    System.out.println("Quantitat" + cantidadtotal);
                    data_row += cantidadtotal.trim();
                }

                PDom = rs.getFloat("PDom");
                if (Float.toString(PDom).length() <= 8) {
                    PDomtotal = String.format("%08.2f", PDom);
                    PDomtotal = PDomtotal.replace(",", "");
                    PDomtotal2 = String.format("%08d", Integer.parseInt(PDomtotal));
                    System.out.println("PDOM" + PDomtotal2);
                    data_row += PDomtotal2.trim();
                }

                PMax = rs.getFloat("PMax");
                if (Float.toString(PMax).length() <= 8) {
                    PMaxtotal = String.format("%08.2f", PMax);
                    PMaxtotal = PMaxtotal.replace(",", "");
                    PMaxTotal2 = String.format("%08d", Integer.parseInt(PMaxtotal));
                    System.out.println("PMAX" + PMaxTotal2);
                    data_row += PMaxTotal2.trim();
                }

                PMin = rs.getFloat("PMin");
                if (Float.toString(PMin).length() <= 8) {
                    PMintotal = String.format("%08.2f", PMin);
                    PMintotal = PMintotal.replace(",", "");
                    PMintotal2 = String.format("%08d", Integer.parseInt(PMintotal));
                    System.out.println("PMIN" + PMintotal2);
                    //data_row += "," + PDomtotal.trim();
                    data_row += PMintotal2.trim();
                }

                bfw.write(data_row);
                bfw.newLine();

            }
            bfw.close();
            rs.close();
        } catch (SQLException | IOException ex) {
        }
    }

    private String obtenerMesFichero() {

        Calendar fecha = new GregorianCalendar();

        //Obtenemos el valor del año, mes, día,
        //hora, minuto y segundo del sistema
        //usando el método get y el parámetro correspondiente                                                     
        int año = fecha.get(Calendar.YEAR) % 100;
        int mes = fecha.get(Calendar.MONTH) - 1;
        //int dia = fecha.get(Calendar.DAY_OF_MONTH);

        String fecha_fichero = año + "" + 0 + (mes + 1);
        System.out.println("Fecha fichero" + fecha_fichero);

        return fecha_fichero;

    }

    private void EnviarCorreo() {
        final String username = "";  // like yourname@outlook.com
        final String password = "";   // password here

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp-mail.outlook.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });
        session.setDebug(true);

        try {

            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username));
            message.setRecipients(Message.RecipientType.TO,
                    InternetAddress.parse(""));
            message.setSubject("Prueba");
            message.setText("Esto es una prueba");
            BodyPart adjunto = new MimeBodyPart();
            adjunto.setDataHandler(new DataHandler(new FileDataSource(fichero)));
            adjunto.setFileName(fichero);
            MimeMultipart multiParte = new MimeMultipart();

            multiParte.addBodyPart(adjunto);
            message.setContent(multiParte);

            Transport.send(message);

            System.out.println("Done");

        } catch (MessagingException e) {
            throw new RuntimeException(e);
        }
    }

    public static void mailto(String fichero) throws IOException {

        Runtime.getRuntime().exec("C://Program Files (x86)//Microsoft Office//root//Office16//OUTLOOK.EXE /c ipm.note /m \"TuCorreoElectronico@LoQueSea.com?subject=" + "\" /a \"" + fichero + "\"");
        Runtime.getRuntime().exec("C://Program Files//Microsoft Office//root//Office16//OUTLOOK.EXE /c ipm.note /m \"TuCorreoElectronico@LoQueSea.com?subject=" + "\" /a \"" + fichero + "\"");

    }

    private void actualizar_fet_final() {

        try {

            connection = DriverManager.getConnection(Conexion_BBDD.Conexion.connectionUrl);
            System.out.println("Conexion abierta_Pre_cargar_datos" + connection);

            statement = connection.createStatement();

            String consulta1 = "UPDATE DatosExternos SET FET = '1' WHERE FET = '0'";
            System.out.println(consulta1);

            preparedStatement = connection.prepareStatement(consulta1);

            preparedStatement.executeUpdate();
            preparedStatement.close();

            statement = connection.createStatement();

            String consulta2 = "UPDATE DatosFinales SET FET = '1' WHERE FET = '0'";
            System.out.println(consulta2);

            preparedStatement = connection.prepareStatement(consulta2);

            preparedStatement.executeUpdate();
            preparedStatement.close();

            statement = connection.createStatement();

            String consulta3 = "UPDATE OrigenDatos SET FET = '1' WHERE FET = '0'";
            System.out.println(consulta3);

            preparedStatement = connection.prepareStatement(consulta3);

            preparedStatement.executeUpdate();
            preparedStatement.close();

            //rs = preparedStatement.executeQuery(consulta2);
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        try {
            //cerramos la conexión
            connection.close();
            //comprobamos que se ha cerrado correctamente la conexión.
            if (connection.isClosed() == true) {
                System.out.println("Conexion cerrada" + connection);
                //si no se ha cerrado correctamente la conexión, volvemos a intentar cerrarla.
            } else {
                connection.close();
                System.out.println("Se ha cerrado la conexión" + connection);

            }
            //capturamos los posibles errores a nivel de SQL, que se puedan producir durante la ejecución
        } catch (SQLException ex) {
            Logger.getLogger(Cargar_Registros.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Cargar_Registros().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btn_cargar_registros;
    private java.awt.Button btn_guardar;
    private java.awt.Button btn_guardar1;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
